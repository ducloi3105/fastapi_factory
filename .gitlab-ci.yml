variables:
  PROJECT: core-engine
  DEV_IMAGE: $DEV_IMAGE_REPO/$PROJECT
  STAGING_IMAGE: $STAGING_IMAGE_REPO/$PROJECT
  PRODUCTION_IMAGE: $PRODUCTION_IMAGE_REPO/$PROJECT
stages:
  - test
  - build
  - review
  - dev
  - staging
  - production

test:
  stage: test
  script:
    - echo "pass"
  only:
    - merge_request
  allow_failure: true

build_for_master:
  stage: build
  image: docker:stable-git
  services:
    - docker:stable-dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ''
  script:
    - docker login -u _json_key --password-stdin https://$DEV_IMAGE_REGISTRY < $DEV_IMAGE_REGISTRY_CREDENTIALS
    - docker build -t $DEV_IMAGE:master --file=Dockerfile .
    - docker push $DEV_IMAGE:master
  only:
    - master

build_for_releases:
  stage: build
  image: docker:stable-git
  services:
    - docker:stable-dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ''
  script:
    - docker login -u _json_key --password-stdin https://$STAGING_IMAGE_REGISTRY < $STAGING_IMAGE_REGISTRY_CREDENTIALS
    - docker build -t $STAGING_IMAGE:$CI_COMMIT_TAG --file=Dockerfile .
    - docker push $STAGING_IMAGE:$CI_COMMIT_TAG
    - docker tag $STAGING_IMAGE:$CI_COMMIT_TAG $PRODUCTION_IMAGE:$CI_COMMIT_TAG
    - docker login -u _json_key --password-stdin https://$PRODUCTION_IMAGE_REGISTRY < $PRODUCTION_IMAGE_REGISTRY_CREDENTIALS
    - docker push $PRODUCTION_IMAGE:$CI_COMMIT_TAG
  only:
    - tags

publish_mr_result:
  image: appropriate/curl:latest
  stage: review
  script:
    - |
      curl -H "Accept: application/json" -H "Content-Type: application/json" -H "Authorization: Bearer $CHILLI_TOKEN" -d "{\"TargetChannel\":[{\"GroupID\":\"60869f2735589f85685cf8fd\",\"TopicID\":\"620cb9bf927fd46b057c3ca9\"}],\"MessageContent\":\"MR has been raised for ${PROJECT}, Please go ahead and review. ${CI_MERGE_REQUEST_PROJECT_URL}/-/merge_requests/${CI_MERGE_REQUEST_IID}\"}" -X POST https://k.apiairasia.com/chilli_entrypoint
  only:
    - merge_request

dev:
  stage: dev
  image: google/cloud-sdk
  script:
    - gcloud auth activate-service-account --key-file $DEV_GCP_SA_CREDENTIALS
    - gcloud container clusters get-credentials $DEV_K8S_CLUSTER --zone $DEV_K8S_CLUSTER_ZONE --project $DEV_GCP_PROJECT
    - kubectl set image deployment $PROJECT-api $PROJECT-api=$DEV_IMAGE:master --namespace=dev
    - kubectl set image deployment $PROJECT-common-task-worker $PROJECT-common-task-worker=$DEV_IMAGE:master --namespace=dev
    - kubectl rollout restart deployment $PROJECT-api --namespace=dev
    - kubectl rollout restart deployment $PROJECT-common-task-worker --namespace=dev
  only:
    refs:
      - master

publish_result_dev:
  image: appropriate/curl:latest
  stage: review
  script:
    - |
      curl -H "Accept: application/json" -H "Content-Type: application/json" -H "Authorization: Bearer $CHILLI_TOKEN" -d '{"TargetChannel":[{"GroupID":"60869f2735589f85685cf8fd","TopicID":"620cbf7f7fe9f3be8c2ba4cd"}],"MessageContent":"Deploying Goquo ota/core-engine Aggregator Service to https://www.devairasia.com (development) - happy review!"}' -X POST https://k.apiairasia.com/chilli_entrypoint
  only:
    refs:
      - master

staging:
  stage: staging
  image: google/cloud-sdk
  script:
    - gcloud auth activate-service-account --key-file $STAGING_GCP_SA_CREDENTIALS
    - gcloud container clusters get-credentials $STAGING_K8S_CLUSTER --zone $STAGING_K8S_CLUSTER_ZONE --project $STAGING_GCP_PROJECT
    - kubectl set image deployment $PROJECT-api $PROJECT-api=$STAGING_IMAGE:$CI_COMMIT_TAG --namespace=staging
    - kubectl set image deployment $PROJECT-common-task-worker $PROJECT-common-task-worker=$STAGING_IMAGE:$CI_COMMIT_TAG --namespace=staging
    - kubectl rollout restart deployment $PROJECT-api --namespace=staging
    - kubectl rollout restart deployment $PROJECT-common-task-worker --namespace=staging
  only:
    refs:
      - tags

production:
  stage: production
  image: google/cloud-sdk
  script:
    - gcloud auth activate-service-account --key-file $PRODUCTION_GCP_SA_CREDENTIALS
    - gcloud container clusters get-credentials $PRODUCTION_K8S_CLUSTER --zone $PRODUCTION_K8S_CLUSTER_ZONE --project $PRODUCTION_GCP_PROJECT
    - kubectl set image deployment $PROJECT-api $PROJECT-api=$PRODUCTION_IMAGE:$CI_COMMIT_TAG --namespace=production
    - kubectl set image deployment $PROJECT-common-task-worker $PROJECT-common-task-worker=$PRODUCTION_IMAGE:$CI_COMMIT_TAG --namespace=production
    - kubectl rollout restart deployment $PROJECT-api --namespace=production
    - kubectl rollout restart deployment $PROJECT-common-task-worker --namespace=production
  only:
    refs:
      - tags
  when: manual
